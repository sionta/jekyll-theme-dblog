@use "helpers/functions" as func;
@use "helpers/mixins" as util;

:root,
::backdrop {
  --gutter: clamp(1.25rem, 4vw, 1.875rem);
  --width: clamp(30rem, 45rem, 75rem);
  --fluid: minmax(var(--gutter), 1fr);
  --feature: minmax(0, 12vw);
  --popout: minmax(0, var(--gutter));
  --content: min(var(--width), 100% - var(--gutter) * 2);
  --content-inset: min(var(--width), 100% - var(--gutter));
}

.grid-breakout {
  display: grid;
  grid-template-columns:
    [fluid-start] var(--fluid) [feature-start] var(--feature)
    [popout-start] var(--popout) [content-start] var(--content) [content-end] var(
      --popout
    )
    [popout-end] var(--feature) [feature-end] var(--fluid) [fluid-end];
}

.grid-breakout-feature-left {
  display: grid;
  grid-template-columns:
    [fluid-start] var(--fluid) [feature-start] var(--feature)
    [popout-start] var(--popout) [content-start] var(--content-inset) [content-end] var(
      --popout
    )
    [popout-end] var(--feature) [feature-end fluid-end];
}

.grid-breakout > * {
  grid-column: content;
}

.content {
  grid-column: content;
}

.fluid {
  grid-column: fluid;
}

.popout {
  grid-column: popout;
}

.feature {
  grid-column: feature;
}

.feature-left {
  grid-column: fluid-start / feature-end;
}

.feature-right {
  grid-column: feature-start / fluid-end;
}

.d-none {
  display: none;
}

.d-block {
  display: block;
}

.d-flex {
  display: flex;
}

.gapless {
  gap: 0;
}

.padless {
  padding: 0;
}

.pad {
  padding: var(--gutter);

  &-i {
    padding-inline: var(--gutter);
  }

  &-is {
    padding-inline-start: var(--gutter);
  }

  &-ie {
    padding-inline-end: var(--gutter);
  }

  &-b {
    padding-block: var(--gutter);
  }

  &-bs {
    padding-block-start: var(--gutter);
  }

  &-be {
    padding-block-end: var(--gutter);
  }
}

.mrg {
  margin: var(--gutter);

  &-i {
    margin-inline: var(--gutter);
  }

  &-is {
    margin-inline-start: var(--gutter);
  }

  &-ie {
    margin-inline-end: var(--gutter);
  }

  &-b {
    margin-block: var(--gutter);
  }

  &-bs {
    margin-block-start: var(--gutter);
  }

  &-be {
    margin-block-end: var(--gutter);
  }
}

.radius {
  &-tl {
    border-top-left-radius: 5rem;
  }

  &-tr {
    border-top-right-radius: 5rem;
  }

  &-bl {
    border-bottom-left-radius: 5rem;
  }

  &-br {
    border-bottom-right-radius: 5rem;
  }
}

/* Init */

.site-content {
  margin: 0;
}

.site-header {
  background-color: var(--color-background);
  border-bottom: 1px solid var(--color-border);
}

.site-footer {
  margin-top: 0;
  background-color: var(--color-secondary-bg);
  border-top: 1px solid var(--color-border);

  > * > *:last-child {
    margin-bottom: 0;
  }
}

:not(:has(.blog)) {
  .site-footer,
  .site-header {
    background-color: var(--color-secondary-bg);
  }
}

:not(:has(.blog, .home)) {
  .site-footer {
    margin-top: var(--gutter);
  }
}

.figure {
  margin-bottom: var(--gutter);
  background-color: var(--color-secondary-bg);
  text-align: center;

  .image {
    display: block;
    margin: 0 auto;
  }

  .caption {
    font-family: var(--font-sans);
    font-size: var(--step-02);
    margin-top: var(--space-02);
  }

  &.feature {
    @extend .grid-breakout;
    padding: var(--gutter) 0;

    .image {
      grid-column: content;
    }
  }

  &.popout {
    padding: var(--gutter);

    .image {
      grid-column: feature;
    }
  }
}

.blog {
  padding-block: var(--gutter);
}

.home {
  background-color: var(--color-secondary-bg);
  font-size: var(--step-04);
  font-weight: 400;
  line-height: 1.15;
}

.header {
  background-color: var(--color-secondary-bg);
  border-bottom: 1px solid var(--color-border);
  font-family: var(--font-sans);
  margin-bottom: var(--gutter);
  padding-block: var(--gutter);
}

.page {
  .header {
    padding-block: var(--space-07);
  }

  .banner {
    max-width: none;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
  }

  .article-body {
    font-family: var(--font-sans);

    h1,
    h2,
    h3,
    h4,
    h5,
    h6 {
      font-weight: 400;
    }
  }
}

.post {
  .header {
    background: none;
    border: none;
  }

  .heading {
    font-size: clamp(2rem, 7vw, 3rem);
  }
}

.heading {
  font-family: var(--font-display) !important;
  font-size: var(--step-08);
  font-weight: 700 !important;
  letter-spacing: -2px;
  line-height: 1.15;
  margin-top: 0;
}

.summary {
  font-family: var(--font-serif);
  font-size: var(--step-04);
  font-style: italic;
}

p:has(.img) {
  display: inline-block;

  &::after {
    clear: both;
  }
}

.img {
  max-width: clamp(50%, 50vw, 100%);
  display: block;

  &.center,
  &.left,
  &.right {
    margin-block: var(--space-unit-xs);
  }

  /* TODO: https://stackoverflow.com/questions/20917632/how-to-align-an-image-at-middle-of-wrapped-text */
  &.center {
    margin-inline: auto;
  }

  &.left {
    float: left;
    margin-inline: auto var(--space-unit);
  }

  &.right {
    float: right;
    margin-inline: var(--space-unit) auto;
  }
}

.datetime,
.authors {
  display: flex;
  align-items: center;
  gap: var(--space-01);
  margin-bottom: var(--space-unit);
}

.authors {
  flex-wrap: wrap;

  .edit-page {
    margin-left: auto;

    @include util.media-query("md", "max") {
      display: block;
      margin-left: 0;
    }
  }
}

.copyright {
  text-align: center;
}

.emoji,
.icon,
[class*="icon-"] {
  width: 1.25em;
  height: 1.25em;
  color: currentColor;
  display: inline-block;
  vertical-align: text-bottom;
}
